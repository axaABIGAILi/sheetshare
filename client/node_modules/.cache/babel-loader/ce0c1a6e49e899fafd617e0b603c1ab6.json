{"ast":null,"code":"import { GET_POSTS, POSTS_STATUS } from '../actionTypes';\nimport { auth, database } from '../firebase';\nexport function allPosts() {\n  return dispatch => {\n    dispatch({\n      type: POSTS_STATUS,\n      payload: true\n    });\n    const allPosts = database.ref('/all/');\n    allPosts.on('value', function (childSnapshot) {\n      console.log(childSnapshot.val());\n      dispatch({\n        type: GET_POSTS,\n        payload: childSnapshot.val()\n      }); //once posts received loading to false\n\n      dispatch({\n        type: POSTS_STATUS,\n        payload: false\n      });\n    }, () => {\n      dispatch({\n        type: POSTS_STATUS,\n        payload: -1\n      });\n    });\n  };\n}\nexport function getPosts() {\n  return dispatch => {\n    // loading true before posts loaded\n    dispatch({\n      type: POSTS_STATUS,\n      payload: true\n    });\n    auth.onAuthStateChanged(userId => {\n      userId = userId.uid;\n      console.log(userId);\n      const readPosts = database.ref('/posts/' + userId); //const allPosts = database.ref('/posts/');\n      // allPosts.on('child_added', function (childSnapshot){\n      //    console.log(childSnapshot.val());\n      //});\n\n      readPosts.on('value', function (childSnapshot) {\n        console.log(childSnapshot.val());\n        dispatch({\n          type: GET_POSTS,\n          payload: childSnapshot.val()\n        }); //once posts received loading to false\n\n        dispatch({\n          type: POSTS_STATUS,\n          payload: false\n        }); // \n      }, () => {\n        dispatch({\n          type: POSTS_STATUS,\n          payload: -1\n        });\n      });\n    }); // const readPosts = database.ref('/posts/');\n    // readPosts.on('child_added', function(childSnapshot) { \n    //     // console.log(childSnapshot.val());\n    //     dispatch({\n    //         type: GET_POSTS,\n    //         payload: childSnapshot.val()\n    //     });\n    //     //once posts received loading to false\n    //     dispatch({\n    //         type:POSTS_STATUS,\n    //         payload:false\n    //     });\n    //     // \n    // },() => {\n    //     dispatch({\n    //         type:POSTS_STATUS,\n    //         payload: -1\n    //     });\n    // });\n  };\n}\nexport function savePosts(post, url) {\n  post.link = url;\n  const uid = auth.currentUser.uid;\n  return dispatch => {\n    database.ref('/posts/' + uid).push(post);\n    database.ref('/all/').push(post);\n  };\n}\nexport function deletePost(id) {\n  const uid = auth.currentUser.uid;\n  return dispatch => database.ref('/posts/' + uid).child(id).remove();\n}","map":{"version":3,"sources":["/Users/joshuagrossman/bootcamp/sheetshare/client/src/actions/postAction.js"],"names":["GET_POSTS","POSTS_STATUS","auth","database","allPosts","dispatch","type","payload","ref","on","childSnapshot","console","log","val","getPosts","onAuthStateChanged","userId","uid","readPosts","savePosts","post","url","link","currentUser","push","deletePost","id","child","remove"],"mappings":"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","sourcesContent":["import { GET_POSTS, POSTS_STATUS } from '../actionTypes';\nimport { auth, database } from '../firebase';\n\nexport function allPosts () {\n\n        return dispatch => {\n\n            dispatch({\n                type: POSTS_STATUS,\n                payload: true\n            });\n\n            const allPosts = database.ref('/all/');\n\n            allPosts.on('value', function (childSnapshot){\n                 console.log(childSnapshot.val());\n                 dispatch({\n                    type: GET_POSTS,\n                    payload: childSnapshot.val()\n                });\n            \n            //once posts received loading to false\n            dispatch({\n                type:POSTS_STATUS,\n                payload:false\n            }); \n        }, () => {\n                dispatch({\n                    type:POSTS_STATUS,\n                    payload: -1\n                });\n          }); \n    }\n}\n\nexport function getPosts() {\n    \n    return dispatch => {\n        // loading true before posts loaded\n        dispatch({\n            type:POSTS_STATUS,\n            payload:true\n        });\n        auth.onAuthStateChanged(userId => {\n             userId = userId.uid;\n             console.log(userId);\n             const readPosts = database.ref('/posts/' + userId);\n             //const allPosts = database.ref('/posts/');\n            // allPosts.on('child_added', function (childSnapshot){\n             //    console.log(childSnapshot.val());\n             //});\n             readPosts.on('value', function(childSnapshot) { \n                console.log(childSnapshot.val());\n                dispatch({\n                    type: GET_POSTS,\n                    payload: childSnapshot.val()\n                });\n                //once posts received loading to false\n                dispatch({\n                    type:POSTS_STATUS,\n                    payload:false\n                });\n                // \n            },() => {\n                dispatch({\n                    type:POSTS_STATUS,\n                    payload: -1\n                });\n            });\n        });\n        // const readPosts = database.ref('/posts/');\n        // readPosts.on('child_added', function(childSnapshot) { \n        //     // console.log(childSnapshot.val());\n        //     dispatch({\n        //         type: GET_POSTS,\n        //         payload: childSnapshot.val()\n        //     });\n        //     //once posts received loading to false\n        //     dispatch({\n        //         type:POSTS_STATUS,\n        //         payload:false\n        //     });\n        //     // \n        // },() => {\n        //     dispatch({\n        //         type:POSTS_STATUS,\n        //         payload: -1\n        //     });\n        // });\n    }\n}\n\nexport function savePosts(post,url) {\n    post.link = url;\n    const uid = auth.currentUser.uid;\n \n    return dispatch => {\n        database.ref('/posts/'+ uid).push(post);\n        database.ref('/all/').push(post);\n    }\n}\n\nexport function deletePost(id) {\n    const uid = auth.currentUser.uid;\n    return dispatch => database.ref('/posts/' + uid).child(id).remove();\n}\n\n"]},"metadata":{},"sourceType":"module"}